Q. You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.

 
Example 1:
Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6

Example 2:
Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Code:

class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        def dfs(r,c):
            grid[r][c]=0
            area=1
            for dx,dy in d:
                nr,nc=r+dx,c+dy
                if(0<=nr<m and 0<=nc<n and grid[nr][nc]==1):
                    area+=dfs(nr,nc)
            return area
        m,n=len(grid),len(grid[0])
        d=((0,1),(1,0),(-1,0),(0,-1))
        x=0
        for i in range(m):
            for j in range(n):
                if(grid[i][j]==1):
                    x=max(x,dfs(i,j))
        return x

