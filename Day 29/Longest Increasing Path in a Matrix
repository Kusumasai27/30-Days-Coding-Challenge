Q. Given an m x n integers matrix, return the length of the longest increasing path in matrix.
From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).


Code:

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        M, N = len(matrix), len(matrix[0])
        MOVES = [(1,0), (0,1), (-1,0), (0,-1)]
        
        @functools.cache
        def dfs(i, j):
            path_length = 0
            for di, dj in MOVES:
                ni, nj = i+di, j+dj
                if 0<=ni<M and 0<=nj<N and matrix[ni][nj] > matrix[i][j]:
                    path_length = max(path_length, dfs(ni, nj))
            return 1 + path_length
        
        res = 0
        for i in range(M):
            for j in range(N):
                res = max(res, dfs(i, j))
        
        return res

