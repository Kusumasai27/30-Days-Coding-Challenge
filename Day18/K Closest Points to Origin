Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).
 

Example 1:
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]

Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]

Code:

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        left = 0
        right = len(points) - 1
        while left < right:
            pivot_index = self.partition(points, left, right)
            if pivot_index == k - 1:
                break
            elif pivot_index > k - 1:
                right = pivot_index - 1
            else:
                left = pivot_index + 1
        
        return points[:k]

    def partition(self, points, left, right):
        pivot_pt = points[right]
        pivot_dist = self.getDistance(pivot_pt)
        index = left
        for i in range(left, right):
            curr_pt = points[i]
            curr_dist = self.getDistance(curr_pt)
            if curr_dist <= pivot_dist:
                points[i], points[index] = points[index], points[i]
                index += 1
        points[right], points[index] = points[index], points[right]
        return index
    def getDistance(self, point):
        x = point[0]
        y = point[1]
        return (x * x + y * y)

