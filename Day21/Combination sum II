Q. Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.


Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

Code:

class Solution:
    def combinationSum2(self, nums: List[int], target: int) -> List[List[int]]:

        result = []
        nums.sort()

        def _backtrack(ind,arr,k,result):

            if k == 0:
                result.append(arr[:])
                return
            
            if k < 0:
                return

            
            for j in range(ind,len(nums)):

                if nums[j] > k: 
                    break

                if j > ind and nums[j] == nums[j - 1]:
                    continue
                

                arr.append(nums[j])

                backtrack(j + 1, arr, k - nums[j], result)

                arr.pop()


        backtrack(0,[],target,result)

        return result
        
 

