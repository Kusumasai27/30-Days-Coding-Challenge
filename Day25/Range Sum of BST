Q. Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].


Example 1:
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32

Example 2:
Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23


Code:

class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        res = []
        if not root:
            return 0
        def DFS(node):
            if node:
                if low <= node.val <= high :
                    res.append(node.val)
                DFS(node.left)
                DFS(node.right)
        DFS(root)
        return sum(res)
 

