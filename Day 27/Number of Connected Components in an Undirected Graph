Q. You are given
An integer n representing the number of nodes, labeled 0 to n-1. 
A list of undirected edges, where each edge is a pair [u, v] connecting node u and node v. 
Find the number of connected components in the graph. A connected component is a maximal set of nodes where each node is reachable from every other node in that component via edges. 

Example
Input: n = 5, edges = [[0,1], [1,2], [3,4]]
Output: 2

Code:


class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        res=0
        visit=set()
        graph = {i:[] for i in range(n)}
        for n1,n2 in edges:
            graph[n1].append(n2)
            graph[n2].append(n1)
        

        def dfs(i):
            if i in visit:
                return False
            if i in cycle:
                return True
            
            cycle.add(i)
            T=1
            for j in graph[i]:
                T = T and dfs(j)
            return T
        
        for i in range(n):
            cycle=set()
            if dfs(i):
                res+=1
            visit.update(cycle)
        
        return res
